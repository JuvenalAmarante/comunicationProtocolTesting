// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api/proto/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MusicService_CreateUser_FullMethodName     = "/gRPC.MusicService/CreateUser"
	MusicService_GetUsers_FullMethodName       = "/gRPC.MusicService/GetUsers"
	MusicService_GetUser_FullMethodName        = "/gRPC.MusicService/GetUser"
	MusicService_UpdateUser_FullMethodName     = "/gRPC.MusicService/UpdateUser"
	MusicService_DeleteUser_FullMethodName     = "/gRPC.MusicService/DeleteUser"
	MusicService_CreateMusic_FullMethodName    = "/gRPC.MusicService/CreateMusic"
	MusicService_GetMusics_FullMethodName      = "/gRPC.MusicService/GetMusics"
	MusicService_GetMusic_FullMethodName       = "/gRPC.MusicService/GetMusic"
	MusicService_UpdateMusic_FullMethodName    = "/gRPC.MusicService/UpdateMusic"
	MusicService_DeleteMusic_FullMethodName    = "/gRPC.MusicService/DeleteMusic"
	MusicService_CreatePlaylist_FullMethodName = "/gRPC.MusicService/CreatePlaylist"
	MusicService_GetPlaylists_FullMethodName   = "/gRPC.MusicService/GetPlaylists"
	MusicService_GetPlaylist_FullMethodName    = "/gRPC.MusicService/GetPlaylist"
	MusicService_UpdatePlaylist_FullMethodName = "/gRPC.MusicService/UpdatePlaylist"
	MusicService_DeletePlaylist_FullMethodName = "/gRPC.MusicService/DeletePlaylist"
)

// MusicServiceClient is the client API for MusicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicServiceClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Users, error)
	GetUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Empty, error)
	CreateMusic(ctx context.Context, in *Music, opts ...grpc.CallOption) (*Music, error)
	GetMusics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Musics, error)
	GetMusic(ctx context.Context, in *MusicId, opts ...grpc.CallOption) (*Music, error)
	UpdateMusic(ctx context.Context, in *Music, opts ...grpc.CallOption) (*Music, error)
	DeleteMusic(ctx context.Context, in *MusicId, opts ...grpc.CallOption) (*Empty, error)
	CreatePlaylist(ctx context.Context, in *Playlist, opts ...grpc.CallOption) (*Playlist, error)
	GetPlaylists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Playlists, error)
	GetPlaylist(ctx context.Context, in *PlaylistId, opts ...grpc.CallOption) (*Playlist, error)
	UpdatePlaylist(ctx context.Context, in *Playlist, opts ...grpc.CallOption) (*Playlist, error)
	DeletePlaylist(ctx context.Context, in *PlaylistId, opts ...grpc.CallOption) (*Empty, error)
}

type musicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicServiceClient(cc grpc.ClientConnInterface) MusicServiceClient {
	return &musicServiceClient{cc}
}

func (c *musicServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, MusicService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Users, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Users)
	err := c.cc.Invoke(ctx, MusicService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) GetUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, MusicService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, MusicService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MusicService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) CreateMusic(ctx context.Context, in *Music, opts ...grpc.CallOption) (*Music, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Music)
	err := c.cc.Invoke(ctx, MusicService_CreateMusic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) GetMusics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Musics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Musics)
	err := c.cc.Invoke(ctx, MusicService_GetMusics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) GetMusic(ctx context.Context, in *MusicId, opts ...grpc.CallOption) (*Music, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Music)
	err := c.cc.Invoke(ctx, MusicService_GetMusic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) UpdateMusic(ctx context.Context, in *Music, opts ...grpc.CallOption) (*Music, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Music)
	err := c.cc.Invoke(ctx, MusicService_UpdateMusic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) DeleteMusic(ctx context.Context, in *MusicId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MusicService_DeleteMusic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) CreatePlaylist(ctx context.Context, in *Playlist, opts ...grpc.CallOption) (*Playlist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Playlist)
	err := c.cc.Invoke(ctx, MusicService_CreatePlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) GetPlaylists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Playlists, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Playlists)
	err := c.cc.Invoke(ctx, MusicService_GetPlaylists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) GetPlaylist(ctx context.Context, in *PlaylistId, opts ...grpc.CallOption) (*Playlist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Playlist)
	err := c.cc.Invoke(ctx, MusicService_GetPlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) UpdatePlaylist(ctx context.Context, in *Playlist, opts ...grpc.CallOption) (*Playlist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Playlist)
	err := c.cc.Invoke(ctx, MusicService_UpdatePlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) DeletePlaylist(ctx context.Context, in *PlaylistId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MusicService_DeletePlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServiceServer is the server API for MusicService service.
// All implementations must embed UnimplementedMusicServiceServer
// for forward compatibility
type MusicServiceServer interface {
	CreateUser(context.Context, *User) (*User, error)
	GetUsers(context.Context, *Empty) (*Users, error)
	GetUser(context.Context, *UserId) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *UserId) (*Empty, error)
	CreateMusic(context.Context, *Music) (*Music, error)
	GetMusics(context.Context, *Empty) (*Musics, error)
	GetMusic(context.Context, *MusicId) (*Music, error)
	UpdateMusic(context.Context, *Music) (*Music, error)
	DeleteMusic(context.Context, *MusicId) (*Empty, error)
	CreatePlaylist(context.Context, *Playlist) (*Playlist, error)
	GetPlaylists(context.Context, *Empty) (*Playlists, error)
	GetPlaylist(context.Context, *PlaylistId) (*Playlist, error)
	UpdatePlaylist(context.Context, *Playlist) (*Playlist, error)
	DeletePlaylist(context.Context, *PlaylistId) (*Empty, error)
	mustEmbedUnimplementedMusicServiceServer()
}

// UnimplementedMusicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMusicServiceServer struct {
}

func (UnimplementedMusicServiceServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMusicServiceServer) GetUsers(context.Context, *Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedMusicServiceServer) GetUser(context.Context, *UserId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMusicServiceServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedMusicServiceServer) DeleteUser(context.Context, *UserId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMusicServiceServer) CreateMusic(context.Context, *Music) (*Music, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMusic not implemented")
}
func (UnimplementedMusicServiceServer) GetMusics(context.Context, *Empty) (*Musics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMusics not implemented")
}
func (UnimplementedMusicServiceServer) GetMusic(context.Context, *MusicId) (*Music, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMusic not implemented")
}
func (UnimplementedMusicServiceServer) UpdateMusic(context.Context, *Music) (*Music, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMusic not implemented")
}
func (UnimplementedMusicServiceServer) DeleteMusic(context.Context, *MusicId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMusic not implemented")
}
func (UnimplementedMusicServiceServer) CreatePlaylist(context.Context, *Playlist) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedMusicServiceServer) GetPlaylists(context.Context, *Empty) (*Playlists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylists not implemented")
}
func (UnimplementedMusicServiceServer) GetPlaylist(context.Context, *PlaylistId) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylist not implemented")
}
func (UnimplementedMusicServiceServer) UpdatePlaylist(context.Context, *Playlist) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaylist not implemented")
}
func (UnimplementedMusicServiceServer) DeletePlaylist(context.Context, *PlaylistId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlaylist not implemented")
}
func (UnimplementedMusicServiceServer) mustEmbedUnimplementedMusicServiceServer() {}

// UnsafeMusicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServiceServer will
// result in compilation errors.
type UnsafeMusicServiceServer interface {
	mustEmbedUnimplementedMusicServiceServer()
}

func RegisterMusicServiceServer(s grpc.ServiceRegistrar, srv MusicServiceServer) {
	s.RegisterService(&MusicService_ServiceDesc, srv)
}

func _MusicService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).GetUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).GetUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_CreateMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Music)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).CreateMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_CreateMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).CreateMusic(ctx, req.(*Music))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_GetMusics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).GetMusics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_GetMusics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).GetMusics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_GetMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MusicId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).GetMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_GetMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).GetMusic(ctx, req.(*MusicId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_UpdateMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Music)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).UpdateMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_UpdateMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).UpdateMusic(ctx, req.(*Music))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_DeleteMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MusicId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).DeleteMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_DeleteMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).DeleteMusic(ctx, req.(*MusicId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Playlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_CreatePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).CreatePlaylist(ctx, req.(*Playlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_GetPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).GetPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_GetPlaylists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).GetPlaylists(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_GetPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).GetPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_GetPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).GetPlaylist(ctx, req.(*PlaylistId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_UpdatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Playlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).UpdatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_UpdatePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).UpdatePlaylist(ctx, req.(*Playlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_DeletePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).DeletePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_DeletePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).DeletePlaylist(ctx, req.(*PlaylistId))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicService_ServiceDesc is the grpc.ServiceDesc for MusicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC.MusicService",
	HandlerType: (*MusicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _MusicService_CreateUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _MusicService_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _MusicService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _MusicService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _MusicService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateMusic",
			Handler:    _MusicService_CreateMusic_Handler,
		},
		{
			MethodName: "GetMusics",
			Handler:    _MusicService_GetMusics_Handler,
		},
		{
			MethodName: "GetMusic",
			Handler:    _MusicService_GetMusic_Handler,
		},
		{
			MethodName: "UpdateMusic",
			Handler:    _MusicService_UpdateMusic_Handler,
		},
		{
			MethodName: "DeleteMusic",
			Handler:    _MusicService_DeleteMusic_Handler,
		},
		{
			MethodName: "CreatePlaylist",
			Handler:    _MusicService_CreatePlaylist_Handler,
		},
		{
			MethodName: "GetPlaylists",
			Handler:    _MusicService_GetPlaylists_Handler,
		},
		{
			MethodName: "GetPlaylist",
			Handler:    _MusicService_GetPlaylist_Handler,
		},
		{
			MethodName: "UpdatePlaylist",
			Handler:    _MusicService_UpdatePlaylist_Handler,
		},
		{
			MethodName: "DeletePlaylist",
			Handler:    _MusicService_DeletePlaylist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/service.proto",
}
